#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "standard_reco_dune10kt.fcl"

process_name: GenReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "genrec10ktw-hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::dunefd_simulation_services
}

# Switch to workspace geometry.
# Note that standard_g4_dune10kt_workspace.fcl also adds
# photon services and a different physics process list.
services.Geometry: @local::dune10kt_workspace_geo

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   generator: @local::dunefd_singlep
   largeant:  @local::dunefd_largeant	  
   daq:       @local::dunefd_simwire       
   rns:       { module_type: "RandomNumberSaver" }
   caldata: @local::dunefd_calwire
   gaushit: @local::dunefd_gaushitfinder
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [generator, largeant, daq, rns, caldata, gaushit] 
# simulate: [ generator, largeant, daq, rns] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "genrec10ktw-event.root" #default file name, can override from command line with -o or --output
 }
}

# TPC 2,3 = apa z1,2, u1, v1
physics.producers.generator.PadOutVectors: true
physics.producers.generator.PDG:      [ 13]
physics.producers.generator.P0:       [0.5]    # GeV
physics.producers.generator.X0:       [180]    # cm TPC 2,3: (-363, -3), (3, 363)
physics.producers.generator.Y0:       [300]    # cm  TPC 2,3: (0, 607)
physics.producers.generator.Z0:       [ 10]    # cm  TPC 2,3: (0, 231)
physics.producers.generator.Theta0XZ: [  0]    # degrees

#services.LArG4Parameters.KeepEMShowerDaughters: true   # True to keep EM decays

# Turn off data compression
#physics.producers.daq.CompressionType: "none"

# Set the threshold for zero supression (10 for FD, 5 for 35t?).
#physics.producers.daq.ZeroThreshold: 10

# Number of adjacent wires and ticks for which data is retained.
#physics.producers.daq.NeighboringChannels:  3
#physics.producers.daq.NearestNeighbor:     25

