#include "services_dune.fcl"
#include "caldata_dune.fcl"

process_name: Caldata

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services

 ExptGeoHelperInterface:   @local::dune_geometry_helper
 Geometry:                 @local::dune10kt_1x2x6_geo
 MagneticField:            @local::no_mag  

}
#source is now a root file
source:
{
  module_type: RootInput
  fileNames:  [ "/data/robinson/musun/1835120/1835120.1/nodaq.root" ]
  maxEvents:   -1       # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
# random number saver
  caldata:   @local::dunefd_calwire
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ caldata ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0
 }
}

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dune_fixedpeds

# Disable bad channels.
#services.IChannelStatusService.BadChannels: [ ]
